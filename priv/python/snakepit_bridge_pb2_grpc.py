# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import snakepit_bridge_pb2 as snakepit__bridge__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in snakepit_bridge_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BridgeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/snakepit.bridge.BridgeService/Ping',
                request_serializer=snakepit__bridge__pb2.PingRequest.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.PingResponse.FromString,
                _registered_method=True)
        self.InitializeSession = channel.unary_unary(
                '/snakepit.bridge.BridgeService/InitializeSession',
                request_serializer=snakepit__bridge__pb2.InitializeSessionRequest.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.InitializeSessionResponse.FromString,
                _registered_method=True)
        self.CleanupSession = channel.unary_unary(
                '/snakepit.bridge.BridgeService/CleanupSession',
                request_serializer=snakepit__bridge__pb2.CleanupSessionRequest.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.CleanupSessionResponse.FromString,
                _registered_method=True)
        self.GetSession = channel.unary_unary(
                '/snakepit.bridge.BridgeService/GetSession',
                request_serializer=snakepit__bridge__pb2.GetSessionRequest.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.GetSessionResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/snakepit.bridge.BridgeService/Heartbeat',
                request_serializer=snakepit__bridge__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.ExecuteTool = channel.unary_unary(
                '/snakepit.bridge.BridgeService/ExecuteTool',
                request_serializer=snakepit__bridge__pb2.ExecuteToolRequest.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.ExecuteToolResponse.FromString,
                _registered_method=True)
        self.ExecuteStreamingTool = channel.unary_stream(
                '/snakepit.bridge.BridgeService/ExecuteStreamingTool',
                request_serializer=snakepit__bridge__pb2.ExecuteToolRequest.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.ToolChunk.FromString,
                _registered_method=True)
        self.RegisterTools = channel.unary_unary(
                '/snakepit.bridge.BridgeService/RegisterTools',
                request_serializer=snakepit__bridge__pb2.RegisterToolsRequest.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.RegisterToolsResponse.FromString,
                _registered_method=True)
        self.GetExposedElixirTools = channel.unary_unary(
                '/snakepit.bridge.BridgeService/GetExposedElixirTools',
                request_serializer=snakepit__bridge__pb2.GetExposedElixirToolsRequest.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.GetExposedElixirToolsResponse.FromString,
                _registered_method=True)
        self.ExecuteElixirTool = channel.unary_unary(
                '/snakepit.bridge.BridgeService/ExecuteElixirTool',
                request_serializer=snakepit__bridge__pb2.ExecuteElixirToolRequest.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.ExecuteElixirToolResponse.FromString,
                _registered_method=True)
        self.StreamTelemetry = channel.stream_stream(
                '/snakepit.bridge.BridgeService/StreamTelemetry',
                request_serializer=snakepit__bridge__pb2.TelemetryControl.SerializeToString,
                response_deserializer=snakepit__bridge__pb2.TelemetryEvent.FromString,
                _registered_method=True)


class BridgeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Health & Session Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CleanupSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTool(self, request, context):
        """Tool Execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteStreamingTool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterTools(self, request, context):
        """Tool Registration & Discovery
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExposedElixirTools(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteElixirTool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTelemetry(self, request_iterator, context):
        """Telemetry Stream (bidirectional)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BridgeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=snakepit__bridge__pb2.PingRequest.FromString,
                    response_serializer=snakepit__bridge__pb2.PingResponse.SerializeToString,
            ),
            'InitializeSession': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeSession,
                    request_deserializer=snakepit__bridge__pb2.InitializeSessionRequest.FromString,
                    response_serializer=snakepit__bridge__pb2.InitializeSessionResponse.SerializeToString,
            ),
            'CleanupSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CleanupSession,
                    request_deserializer=snakepit__bridge__pb2.CleanupSessionRequest.FromString,
                    response_serializer=snakepit__bridge__pb2.CleanupSessionResponse.SerializeToString,
            ),
            'GetSession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSession,
                    request_deserializer=snakepit__bridge__pb2.GetSessionRequest.FromString,
                    response_serializer=snakepit__bridge__pb2.GetSessionResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=snakepit__bridge__pb2.HeartbeatRequest.FromString,
                    response_serializer=snakepit__bridge__pb2.HeartbeatResponse.SerializeToString,
            ),
            'ExecuteTool': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTool,
                    request_deserializer=snakepit__bridge__pb2.ExecuteToolRequest.FromString,
                    response_serializer=snakepit__bridge__pb2.ExecuteToolResponse.SerializeToString,
            ),
            'ExecuteStreamingTool': grpc.unary_stream_rpc_method_handler(
                    servicer.ExecuteStreamingTool,
                    request_deserializer=snakepit__bridge__pb2.ExecuteToolRequest.FromString,
                    response_serializer=snakepit__bridge__pb2.ToolChunk.SerializeToString,
            ),
            'RegisterTools': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterTools,
                    request_deserializer=snakepit__bridge__pb2.RegisterToolsRequest.FromString,
                    response_serializer=snakepit__bridge__pb2.RegisterToolsResponse.SerializeToString,
            ),
            'GetExposedElixirTools': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExposedElixirTools,
                    request_deserializer=snakepit__bridge__pb2.GetExposedElixirToolsRequest.FromString,
                    response_serializer=snakepit__bridge__pb2.GetExposedElixirToolsResponse.SerializeToString,
            ),
            'ExecuteElixirTool': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteElixirTool,
                    request_deserializer=snakepit__bridge__pb2.ExecuteElixirToolRequest.FromString,
                    response_serializer=snakepit__bridge__pb2.ExecuteElixirToolResponse.SerializeToString,
            ),
            'StreamTelemetry': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamTelemetry,
                    request_deserializer=snakepit__bridge__pb2.TelemetryControl.FromString,
                    response_serializer=snakepit__bridge__pb2.TelemetryEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'snakepit.bridge.BridgeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('snakepit.bridge.BridgeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BridgeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/snakepit.bridge.BridgeService/Ping',
            snakepit__bridge__pb2.PingRequest.SerializeToString,
            snakepit__bridge__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InitializeSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/snakepit.bridge.BridgeService/InitializeSession',
            snakepit__bridge__pb2.InitializeSessionRequest.SerializeToString,
            snakepit__bridge__pb2.InitializeSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CleanupSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/snakepit.bridge.BridgeService/CleanupSession',
            snakepit__bridge__pb2.CleanupSessionRequest.SerializeToString,
            snakepit__bridge__pb2.CleanupSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/snakepit.bridge.BridgeService/GetSession',
            snakepit__bridge__pb2.GetSessionRequest.SerializeToString,
            snakepit__bridge__pb2.GetSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/snakepit.bridge.BridgeService/Heartbeat',
            snakepit__bridge__pb2.HeartbeatRequest.SerializeToString,
            snakepit__bridge__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/snakepit.bridge.BridgeService/ExecuteTool',
            snakepit__bridge__pb2.ExecuteToolRequest.SerializeToString,
            snakepit__bridge__pb2.ExecuteToolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteStreamingTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/snakepit.bridge.BridgeService/ExecuteStreamingTool',
            snakepit__bridge__pb2.ExecuteToolRequest.SerializeToString,
            snakepit__bridge__pb2.ToolChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterTools(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/snakepit.bridge.BridgeService/RegisterTools',
            snakepit__bridge__pb2.RegisterToolsRequest.SerializeToString,
            snakepit__bridge__pb2.RegisterToolsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExposedElixirTools(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/snakepit.bridge.BridgeService/GetExposedElixirTools',
            snakepit__bridge__pb2.GetExposedElixirToolsRequest.SerializeToString,
            snakepit__bridge__pb2.GetExposedElixirToolsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteElixirTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/snakepit.bridge.BridgeService/ExecuteElixirTool',
            snakepit__bridge__pb2.ExecuteElixirToolRequest.SerializeToString,
            snakepit__bridge__pb2.ExecuteElixirToolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamTelemetry(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/snakepit.bridge.BridgeService/StreamTelemetry',
            snakepit__bridge__pb2.TelemetryControl.SerializeToString,
            snakepit__bridge__pb2.TelemetryEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
